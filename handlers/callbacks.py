from aiogram import F, Router
from database.functions import *
from bot.bot import Users, bot, CHANNEL_ID

router_for_callbacks = Router()


def main():
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
    async def send_to_channel(data):
        text, image = data[2], data[3]
        if image == '-':
            text = text + '\n\n*–ü—Ä–∏—Å–ª–∞–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º*'
            await bot.send_message(chat_id=CHANNEL_ID, text=text, parse_mode='Markdown')

        else:
            photo = decode_image(image)
            if text == '-':
                text = '–ü—Ä–∏—Å–ª–∞–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º'
            else:
                text = text + '\n\n–ü—Ä–∏—Å–ª–∞–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º'

            await bot.send_photo(chat_id=CHANNEL_ID, caption=text, parse_mode=None, photo=photo)

    # –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    @router_for_callbacks.callback_query(F.data.startswith('–ü'))
    async def callback_accept(callback_query: CallbackQuery):
        res = callback_query.data.split('_')
        num = int(res[1])
        data = Users.get_data_from_num(num)

        if not data[4]:  # —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ
            text = (f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ <u>‚Ññ{data[1]}</u> –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –∞–¥–º–∏–Ω–æ–º.'
                    f' –û–∂–∏–¥–∞–π—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ.')

            await bot.send_message(chat_id=data[0], text=text)
            Users.change_process(num)
            await update(callback_query, 'üîÑ –ò–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª!', data[3])

            await send_to_channel(data)
            await update(callback_query, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª!', data[3])
            await callback_query.answer()
        else:  # –∫—Ç–æ-—Ç–æ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ —É–∂–µ –ø—Ä–∏–Ω—è–ª/–æ—Ç–∫–ª–æ–Ω–∏–ª
            text = '–æ—Ç–∫–ª–æ–Ω–∏–ª' if data[4] == 2 else '–ø—Ä–∏–Ω—è–ª'
            await update(callback_query, f'‚ÄºÔ∏è–ö—Ç–æ-—Ç–æ —É–∂–µ {text} —Å–æ–æ–±—â–µ–Ω–∏–µ‚ÄºÔ∏è', data[3])
            await callback_query.answer()

    # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    @router_for_callbacks.callback_query(F.data.startswith('–û'))
    async def callback_accept(callback_query: CallbackQuery):
        res = callback_query.data.split('_')
        num = int(res[1])
        data = Users.get_data_from_num(num)

        if not data[4]:  # —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            text = f'<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é</b>, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ <u>‚Ññ{data[1]}</u> –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –∞–¥–º–∏–Ω–æ–º.'

            await bot.send_message(chat_id=data[0], text=text)
            Users.change_process(num, 2)
            await update(callback_query, '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!', data[3])
            await callback_query.answer()
        else:  # –∫—Ç–æ-—Ç–æ –∏–∑ –∞–¥–º–∏–Ω–æ–≤ —É–∂–µ –ø—Ä–∏–Ω—è–ª/–æ—Ç–∫–ª–æ–Ω–∏–ª
            text = '–æ—Ç–∫–ª–æ–Ω–∏–ª' if data[4] == 2 else '–ø—Ä–∏–Ω—è–ª'
            await update(callback_query, f'‚ÄºÔ∏è–ö—Ç–æ-—Ç–æ —É–∂–µ {text} —Å–æ–æ–±—â–µ–Ω–∏–µ‚ÄºÔ∏è', data[3])
            await callback_query.answer()


main()
